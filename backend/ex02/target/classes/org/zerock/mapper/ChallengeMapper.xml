<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.zerock.mapper.ChallengeMapper">

    <!--
        @brief 모든 챌린지 조회
        @details 
        CHALLENGES 테이블에 저장된 모든 챌린지 정보를 조회합니다.
        @return 모든 챌린지 리스트 (org.zerock.domain.Challenge)
    -->
    <select id="findAll" resultType="org.zerock.domain.Challenge">
        SELECT challenge_id AS challengeId,
               title, description, duration, activity_type_id AS activityTypeId
        FROM CHALLENGES
    </select>

    <!--
        @brief 챌린지 ID로 특정 챌린지 조회
        @details 
        주어진 챌린지 ID를 기반으로 CHALLENGES 테이블에서 특정 챌린지를 조회합니다.
        @param challengeId 조회할 챌린지의 ID (long 타입)
        @return 해당 챌린지 정보 (org.zerock.domain.Challenge)
    -->
    <select id="findById" parameterType="long" resultType="org.zerock.domain.Challenge">
        SELECT 
            challenge_id AS challengeId,
            title,
            description,
            duration,
            activity_type_id AS activityTypeId
        FROM Challenges 
        WHERE challenge_id = #{challengeId, jdbcType=NUMERIC}
    </select>

    <!--
        @brief 새로운 챌린지 삽입
        @details 
        CHALLENGES 테이블에 새로운 챌린지 정보를 삽입합니다.
        @param challenge 삽입할 챌린지 객체 (org.zerock.domain.Challenge)
        @return 삽입된 챌린지의 생성된 ID (keyProperty="challengeId")
    -->
    <insert id="insert" parameterType="org.zerock.domain.Challenge" useGeneratedKeys="true" keyProperty="challengeId">
        INSERT INTO CHALLENGES (title, description, duration, activity_type_id)
        VALUES (#{title}, #{description}, #{duration}, #{activityTypeId})
    </insert>

    <!--
        @brief 제목과 유형으로 챌린지 조회
        @details 
        제목과 활동 유형 ID를 기반으로 CHALLENGES 테이블에서 챌린지를 조회합니다.
        @param title 챌린지 제목 (String)
        @param activityTypeId 활동 유형 ID (Integer)
        @return 해당 조건에 맞는 챌린지 정보 (org.zerock.domain.Challenge)
    -->
    <select id="findByTitleAndType" parameterType="map" resultType="org.zerock.domain.Challenge">
        SELECT 
            challenge_id AS challengeId,
            title,
            activity_type_id AS activityTypeId,
            duration
        FROM challenges
        WHERE title = #{title, jdbcType=VARCHAR} 
          AND activity_type_id = #{activityTypeId, jdbcType=INTEGER}
    </select>

    <!--
        @brief 챌린지 ID로 특정 챌린지 조회
        @details 
        CHALLENGES 테이블에서 챌린지 ID를 기반으로 챌린지 정보를 조회합니다.
        @param challengeId 조회할 챌린지 ID
        @return 해당 챌린지 정보 (org.zerock.domain.Challenge)
    -->
    <select id="findByChallengeId" resultType="org.zerock.domain.Challenge">
        SELECT 
            challenge_id AS challengeId,
            title,
            description,
            duration,
            activity_type_id AS activityTypeId
        FROM Challenges 
        WHERE challenge_id = #{challengeId}
    </select>

    <!--
        @brief 챌린지 ID로 과제 조회
        @details 
        Challenge_Tasks 테이블에서 주어진 챌린지 ID에 해당하는 첫 번째 과제를 조회합니다.
        @param challengeId 조회할 챌린지 ID (long 타입)
        @return 챌린지 과제 정보 (org.zerock.domain.ChallengeTask)
    -->
    <select id="findTaskByChallengeId" parameterType="long" resultType="org.zerock.domain.ChallengeTask">
        SELECT 
            task_id AS taskId,
            challenge_id AS challengeId,
            task
        FROM Challenge_Tasks
        WHERE challenge_id = #{challengeId, jdbcType=NUMERIC}
        AND ROWNUM = 1
    </select>
</mapper>
